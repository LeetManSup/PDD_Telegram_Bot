import random
import time

import telebot

import bot_logic
import config

from bot_logic import Menu
from telebot import types
from trafficRules import rules, signs, markings, approval, failures
from trafficRules import tasks1, tasks2, tasks3, tasks4, tasks5, tasks6, tasks7, tasks8
from trafficRules import tasks9, tasks10, tasks11, tasks12, tasks13, tasks14, tasks15, tasks16
from trafficRules import tasks17, tasks18, tasks19, tasks20, tasks21, tasks22, tasks23, tasks24, tasks25, tasks26

bot = telebot.TeleBot(config.TOKEN)


# Bot launch
@bot.message_handler(commands=['start'])
def start(message):
    # Hello sticker + message + main menu button
    start_button_menu = Menu()
    sti = open('stickers/7.webp', 'rb')

    start_button_menu.add(types.InlineKeyboardButton('üèÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))

    bot.send_sticker(message.chat.id, sti)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n\n<b>{1.first_name}</b> - —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π "
                                      "–ø–æ–º–æ–∂–µ—Ç –í–∞–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è.\n\n–£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ "
                                      "–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!".format(message.from_user, bot.get_me()), parse_mode='html',
                     reply_markup=start_button_menu.get())


# Message handler
@bot.message_handler(content_types=['text'])
def welcome(message):
    main_menu = Menu()
    sti = open('stickers/12.webp', 'rb')

    main_menu.add(types.InlineKeyboardButton(text='üìö –¢–µ–æ—Ä–∏—è', callback_data='theory'))
    main_menu.add(types.InlineKeyboardButton(text='üóÇ –¢–µ–º—ã', callback_data='topics'))
    main_menu.add(types.InlineKeyboardButton(text='‚úâ –ë–∏–ª–µ—Ç—ã', callback_data='cards'))
    #    main_menu.add(types.InlineKeyboardButton(text='üöî –≠–∫–∑–∞–º–µ–Ω', callback_data='exam'))

    bot.send_sticker(message.chat.id, sti)
    bot.send_message(message.chat.id, "–ë–æ—Ç –Ω–µ —É–º–µ–µ—Ç —á–∏—Ç–∞—Ç—å, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "<b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>", reply_markup=main_menu.get(), parse_mode='html')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    # Default
    if call.data == "main_menu":
        main_menu = Menu()

        main_menu.add(types.InlineKeyboardButton(text='üìö –¢–µ–æ—Ä–∏—è', callback_data='theory'))
        main_menu.add(types.InlineKeyboardButton(text='üóÇ –¢–µ–º—ã', callback_data='topics'))
        main_menu.add(types.InlineKeyboardButton(text='‚úâ –ë–∏–ª–µ—Ç—ã', callback_data='cards'))
        #        main_menu.add(types.InlineKeyboardButton(text='üöî –≠–∫–∑–∞–º–µ–Ω', callback_data='exam'))

        bot.edit_message_text("<b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>", call.message.chat.id, call.message.message_id,
                              reply_markup=main_menu.get(), parse_mode='html')

    # Listing of main menu
    elif call.data == 'theory':
        theory_menu = Menu(back_button=types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='main_menu'))

        theory_menu.add(types.InlineKeyboardButton('üö¶ –ü–î–î', callback_data='rules'))
        theory_menu.add(types.InlineKeyboardButton('üö∏ –ó–Ω–∞–∫–∏', callback_data='signs'))
        theory_menu.add(types.InlineKeyboardButton('üõ£ –†–∞–∑–º–µ—Ç–∫–∞', callback_data='markings'))
        theory_menu.add(types.InlineKeyboardButton('üöó –î–æ–ø—É—Å–∫ –¢–°', callback_data='approval'))
        theory_menu.add(types.InlineKeyboardButton('‚öô –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Ç–∏ –¢–°', callback_data='failures'))

        bot.edit_message_text(
            "üìö<b>–¢–ï–û–†–ò–Ø</b>üìö\n\n\nüö¶ - –ü—Ä–∞–≤–∏–ª–∞ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è\n\nüö∏ - –ó–Ω–∞–∫–∏\n\nüõ£ - –†–∞–∑–º–µ—Ç–∫–∞\n\nüöó - "
            "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–æ–ø—É—Å–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ "
            "–¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –ª–∏—Ü –ø–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è\n\n‚öô - –ü–µ—Ä–µ—á–µ–Ω—å "
            "–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –∏ —É—Å–ª–æ–≤–∏–π, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö "
            "—Å—Ä–µ–¥—Å—Ç–≤\n\n‚è™ - –ù–∞–∑–∞–¥", call.message.chat.id, call.message.message_id,
            reply_markup=theory_menu.get(), parse_mode='html')

    elif call.data == 'topics':
        topics_menu = Menu(back_button=types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='main_menu'))

        topics_menu.fill_num('topic', 26)

        bot.edit_message_text("<b>–¢–ï–ú–´</b>\n\n"
                              "üóÇ1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è\n"
                              "üóÇ2. –û–±—â–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π\n"
                              "üóÇ3. –î–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏\n"
                              "üóÇ4. –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø—Ä–æ–µ–∑–∂–µ–π —á–∞—Å—Ç–∏\n"
                              "üóÇ5. –î–æ—Ä–æ–∂–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞\n"
                              "üóÇ6. –°–∏–≥–Ω–∞–ª—ã —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞\n"
                              "üóÇ7. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n"
                              "üóÇ8. –ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è, –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                              "üóÇ9. –ë—É–∫—Å–∏—Ä–æ–≤–∫–∞ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n"
                              "üóÇ10. –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è\n"
                              "üóÇ11. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                              "üóÇ12. –û–±–≥–æ–Ω, –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ, –≤—Å—Ç—Ä–µ—á–Ω—ã–π —Ä–∞–∑—ä–µ–∑–¥\n"
                              "üóÇ13. –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∞–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª—è–º\n"
                              "üóÇ14. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å—Ç–æ—è–Ω–∫–∞\n"
                              "üóÇ15. –£—á–µ–±–Ω–∞—è –µ–∑–¥–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–≤–∏–∂–µ–Ω–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç–æ–≤\n"
                              "üóÇ16. –ü—Ä–æ–µ–∑–¥ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤\n"
                              "üóÇ17. –î–≤–∏–∂–µ–Ω–∏–µ –≤ –∂–∏–ª—ã—Ö –∑–æ–Ω–∞—Ö\n"
                              "üóÇ18. –ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏–º–∏ —Å–≤–µ—Ç–æ–≤—ã–º–∏ –ø—Ä–∏–±–æ—Ä–∞–º–∏ –∏ –∑–≤—É–∫–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏\n"
                              "üóÇ19. –î–≤–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ –ø—É—Ç–∏\n"
                              "üóÇ20. –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –∏ —É—Å–ª–æ–≤–∏—è –¥–æ–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏\n"
                              "üóÇ21. –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n"
                              "üóÇ22. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –∏ —Ç–µ—Ö–Ω–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º\n"
                              "üóÇ23. –ü–µ—Ä–µ–≤–æ–∑–∫–∞ –ª—é–¥–µ–π –∏ –≥—Ä—É–∑–æ–≤\n"
                              "üóÇ24. –û–∫–∞–∑–∞–Ω–∏–µ –¥–æ–≤—Ä–∞—á–µ–±–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏\n"
                              "üóÇ25. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è\n"
                              "üóÇ26. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–Ω–∞–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n",
                              call.message.chat.id, call.message.message_id, reply_markup=topics_menu.get(),
                              parse_mode='html'),

    elif call.data == 'cards':
        cards_menu = Menu(back_button=types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='main_menu'))

        #        cards_menu.fill_num('card', 40)
        cards_menu.add(types.InlineKeyboardButton('üèÅ –†–µ—à–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–ª–µ—Ç', callback_data='card'))
        bot_logic.main_card = bot_logic.generate_card()
        bot_logic.correct_answers = -1

        bot.edit_message_text("‚úâ<b>–ë–ò–õ–ï–¢–´</b>‚úâ\n\n"
                              "–ë–∏–ª–µ—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 20 –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ",
                              call.message.chat.id, call.message.message_id, reply_markup=cards_menu.get(),
                              parse_mode='html'),

    # Listing of theory menu
    elif call.data == 'rules':
        rules_menu = Menu(back_button=types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='theory'))

        bot.edit_message_text(f"*–ü–†–ê–í–ò–õ–ê –î–û–†–û–ñ–ù–û–ì–û –î–í–ò–ñ–ï–ù–ò–Ø*\n\n"
                              f"üö¶1 [–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è]({rules[0]})\n"
                              f"üö¶2 [–û–±—â–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π]({rules[1]})\n"
                              f"üö¶3 [–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤]({rules[2]})\n"
                              f"üö¶4 [–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–µ—à–µ—Ö–æ–¥–æ–≤]({rules[3]})\n"
                              f"üö¶5 [–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤]({rules[4]})\n"
                              f"üö¶6 [–°–∏–≥–Ω–∞–ª—ã —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞]({rules[5]})\n"
                              f"üö¶7 [–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–Ω–∞–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏]({rules[6]})\n"
                              f"üö¶8 [–ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è, –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ]({rules[7]})\n"
                              f"üö¶9 [–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø—Ä–æ–µ–∑–∂–µ–π —á–∞—Å—Ç–∏]({rules[8]})\n"
                              f"üö¶10 [–°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è]({rules[9]})\n"
                              f"üö¶11 [–û–±–≥–æ–Ω, –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ, –≤—Å—Ç—Ä–µ—á–Ω—ã–π —Ä–∞–∑—ä–µ–∑–¥]({rules[10]})\n"
                              f"üö¶12 [–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å—Ç–æ—è–Ω–∫–∞]({rules[11]})\n"
                              f"üö¶13 [–ü—Ä–æ–µ–∑–¥ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–æ–≤]({rules[12]})\n"
                              f"üö¶14 [–ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤]({rules[13]})\n"
                              f"üö¶15 [–î–≤–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ –ø—É—Ç–∏]({rules[14]})\n"
                              f"üö¶16 [–î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∞–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª—è–º]({rules[15]})\n"
                              f"üö¶17 [–î–≤–∏–∂–µ–Ω–∏–µ –≤ –∂–∏–ª—ã—Ö –∑–æ–Ω–∞—Ö]({rules[16]})\n"
                              f"üö¶18 [–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤]({rules[17]})\n"
                              f"üö¶19 [–ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏–º–∏ —Å–≤–µ—Ç–æ–≤—ã–º–∏ –ø—Ä–∏–±–æ—Ä–∞–º–∏ –∏ –∑–≤—É–∫–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏]({rules[18]})\n"
                              f"üö¶20 [–ë—É–∫—Å–∏—Ä–æ–≤–∫–∞ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤]({rules[19]})\n"
                              f"üö¶21 [–£—á–µ–±–Ω–∞—è –µ–∑–¥–∞]({rules[20]})\n"
                              f"üö¶22 [–ü–µ—Ä–µ–≤–æ–∑–∫–∞ –ª—é–¥–µ–π]({rules[21]})\n"
                              f"üö¶23 [–ü–µ—Ä–µ–≤–æ–∑–∫–∞ –≥—Ä—É–∑–æ–≤]({rules[22]})\n"
                              f"üö¶24 [–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–≤–∏–∂–µ–Ω–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç–æ–≤ –∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π –º–æ–ø–µ–¥–æ–≤]({rules[23]})\n"
                              f"üö¶25 [–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–≤–∏–∂–µ–Ω–∏—é –≥—É–∂–µ–≤—ã—Ö –ø–æ–≤–æ–∑–æ–∫, –∞ —Ç–∞–∫–∂–µ –∫ –ø—Ä–æ–≥–æ–Ω—É –∂–∏–≤–æ—Ç–Ω—ã—Ö]({rules[24]})\n"
                              f"üö¶26 [–ù–æ—Ä–º—ã –≤—Ä–µ–º–µ–Ω–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –∏ –æ—Ç–¥—ã—Ö–∞]({rules[25]})\n",
                              call.message.chat.id, call.message.message_id, reply_markup=rules_menu.get(),
                              parse_mode='MarkdownV2', disable_web_page_preview=True)

    elif call.data == 'signs':
        signs_menu = Menu(back_button=types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='theory'))

        bot.edit_message_text(f"*–ó–ù–ê–ö–ò*\n\n"
                              f"üö∏1 [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ –∑–Ω–∞–∫–∏]({signs[0]})\n"
                              f"üö∏2 [–ó–Ω–∞–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞]({signs[1]})\n"
                              f"üö∏3 [–ó–∞–ø—Ä–µ—â–∞—é—â–∏–µ –∑–Ω–∞–∫–∏]({signs[2]})\n"
                              f"üö∏4 [–ü—Ä–µ–¥–ø–∏—Å—ã–≤–∞—é—â–∏–µ –∑–Ω–∞–∫–∏]({signs[3]})\n"
                              f"üö∏5 [–ó–Ω–∞–∫–∏ –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–π]({signs[4]})\n"
                              f"üö∏6 [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏]({signs[5]})\n"
                              f"üö∏7 [–ó–Ω–∞–∫–∏ —Å–µ—Ä–≤–∏—Å–∞]({signs[6]})\n"
                              f"üö∏8 [–ó–Ω–∞–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ —Ç–∞–±–ª–∏—á–∫–∏]({signs[7]})\n",
                              call.message.chat.id, call.message.message_id, reply_markup=signs_menu.get(),
                              parse_mode='MarkdownV2', disable_web_page_preview=True)

    elif call.data == 'markings':
        markings_menu = Menu(back_button=types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='theory'))

        bot.edit_message_text(f"*–†–ê–ó–ú–ï–¢–ö–ê*\n\n"
                              f"üõ£1 [–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞]({markings[0]})\n"
                              f"üõ£2 [–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞]({markings[1]})\n",
                              call.message.chat.id, call.message.message_id, reply_markup=markings_menu.get(),
                              parse_mode='MarkdownV2', disable_web_page_preview=True)

    elif call.data == 'approval':
        approval_menu = Menu(back_button=types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='theory'))

        bot.edit_message_text(f"*–î–û–ü–£–°–ö*\n\n"
                              f"üöó1 [–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–æ–ø—É—Å–∫—É –¢–° –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏]({approval[0]})\n",
                              call.message.chat.id, call.message.message_id, reply_markup=approval_menu.get(),
                              parse_mode='MarkdownV2', disable_web_page_preview=True)

    elif call.data == 'failures':
        failures_menu = Menu(back_button=types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='theory'))

        bot.edit_message_text(f"*–ù–ï–ò–°–ü–†–û–í–ù–û–°–¢–ò*\n\n"
                              f"‚öô1 [–ü–µ—Ä–µ—á–µ–Ω—å –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –¢–°]({failures[0]})\n",
                              call.message.chat.id, call.message.message_id, reply_markup=failures_menu.get(),
                              parse_mode='MarkdownV2', disable_web_page_preview=True)

    # Topics
    elif call.data == 'topic1':
        bot_logic.task_sender(bot, call, 1)
    elif call.data == 'topic2':
        bot_logic.task_sender(bot, call, 2)
    elif call.data == 'topic3':
        bot_logic.task_sender(bot, call, 3)
    elif call.data == 'topic4':
        bot_logic.task_sender(bot, call, 4)
    elif call.data == 'topic5':
        bot_logic.task_sender(bot, call, 5)
    elif call.data == 'topic6':
        bot_logic.task_sender(bot, call, 6)
    elif call.data == 'topic7':
        bot_logic.task_sender(bot, call, 7)
    elif call.data == 'topic8':
        bot_logic.task_sender(bot, call, 8)
    elif call.data == 'topic9':
        bot_logic.task_sender(bot, call, 9)
    elif call.data == 'topic10':
        bot_logic.task_sender(bot, call, 10)
    elif call.data == 'topic11':
        bot_logic.task_sender(bot, call, 11)
    elif call.data == 'topic12':
        bot_logic.task_sender(bot, call, 12)
    elif call.data == 'topic13':
        bot_logic.task_sender(bot, call, 13)
    elif call.data == 'topic14':
        bot_logic.task_sender(bot, call, 14)
    elif call.data == 'topic15':
        bot_logic.task_sender(bot, call, 15)
    elif call.data == 'topic16':
        bot_logic.task_sender(bot, call, 16)
    elif call.data == 'topic17':
        bot_logic.task_sender(bot, call, 17)
    elif call.data == 'topic18':
        bot_logic.task_sender(bot, call, 18)
    elif call.data == 'topic19':
        bot_logic.task_sender(bot, call, 19)
    elif call.data == 'topic20':
        bot_logic.task_sender(bot, call, 20)
    elif call.data == 'topic21':
        bot_logic.task_sender(bot, call, 21)
    elif call.data == 'topic22':
        bot_logic.task_sender(bot, call, 22)
    elif call.data == 'topic23':
        bot_logic.task_sender(bot, call, 23)
    elif call.data == 'topic24':
        bot_logic.task_sender(bot, call, 24)
    elif call.data == 'topic25':
        bot_logic.task_sender(bot, call, 25)
    elif call.data == 'topic26':
        bot_logic.task_sender(bot, call, 26)

    # Cards
    elif call.data == 'card':
        if len(bot_logic.main_card) != 0:
            random.shuffle(bot_logic.main_card)
            card_task = bot_logic.main_card[0]
            bot_logic.send_card_task(card_task, bot, call)
            bot_logic.main_card.remove(card_task)
            bot_logic.correct_answers += 1
            print(bot_logic.correct_answers)
        else:
            back_menu = Menu()
            back_menu.add(types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='cards'))
            bot_logic.correct_answers += 1
            if bot_logic.correct_answers >= 18:
                bot.send_message(call.message.chat.id, "<b>–†–ï–ó–£–õ–¨–¢–ê–¢</b>\n\n"
                                                       "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã —Å–¥–∞–ª–∏ –±–∏–ª–µ—Ç!\n\n"
                                                       f"–†–µ—à–µ–Ω–æ: {bot_logic.correct_answers} –∏–∑ 20",
                                 reply_markup=back_menu.get(),
                                 parse_mode='html')
            else:
                bot.send_message(call.message.chat.id, "<b>–†–ï–ó–£–õ–¨–¢–ê–¢</b>\n\n"
                                                       "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –Ω–µ —Å–¥–∞–ª–∏ –±–∏–ª–µ—Ç. –ù–∞–¥–æ –±–æ–ª—å—à–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è\n\n"
                                                       f"–†–µ—à–µ–Ω–æ: {bot_logic.correct_answers} –∏–∑ 20",
                                 reply_markup=back_menu.get(),
                                 parse_mode='html')

    #    elif call.data == 'wrong_in_card':

    # Hints
    elif call.data == 'hint1':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks1[0].correct}</b>\n\n{tasks1[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint2':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks2[0].correct}</b>\n\n{tasks2[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint3':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks3[0].correct}</b>\n\n{tasks3[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint4':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks4[0].correct}</b>\n\n{tasks4[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint5':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks5[0].correct}</b>\n\n{tasks5[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint6':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks6[0].correct}</b>\n\n{tasks6[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint7':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks7[0].correct}</b>\n\n{tasks7[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint8':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks8[0].correct}</b>\n\n{tasks8[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint9':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks9[0].correct}</b>\n\n{tasks9[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint10':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks10[0].correct}</b>\n\n{tasks10[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint11':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks11[0].correct}</b>\n\n{tasks11[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint12':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks12[0].correct}</b>\n\n{tasks12[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint13':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks13[0].correct}</b>\n\n{tasks13[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint14':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks14[0].correct}</b>\n\n{tasks14[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint15':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks15[0].correct}</b>\n\n{tasks15[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint16':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks16[0].correct}</b>\n\n{tasks16[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint17':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks17[0].correct}</b>\n\n{tasks17[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint18':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks18[0].correct}</b>\n\n{tasks18[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint19':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks19[0].correct}</b>\n\n{tasks19[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint20':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks20[0].correct}</b>\n\n{tasks20[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint21':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks21[0].correct}</b>\n\n{tasks21[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint22':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks22[0].correct}</b>\n\n{tasks22[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint23':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks23[0].correct}</b>\n\n{tasks23[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint24':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks24[0].correct}</b>\n\n{tasks24[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint25':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks25[0].correct}</b>\n\n{tasks25[0].hint}",
                         parse_mode='html')
    elif call.data == 'hint26':
        bot.send_message(call.message.chat.id, f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {tasks26[0].correct}</b>\n\n{tasks26[0].hint}",
                         parse_mode='html')

    elif call.data == 'wrong':
        bot.answer_callback_query(call.id, "‚ùå–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑‚ùå", show_alert=True)
    elif call.data == 'wrong_in_card':
        if len(bot_logic.main_card) != 0:
            random.shuffle(bot_logic.main_card)
            card_task = bot_logic.main_card[0]
            bot_logic.send_card_task(card_task, bot, call)
            bot_logic.main_card.remove(card_task)
            print(bot_logic.correct_answers)
        else:
            back_menu = Menu()
            back_menu.add(types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='cards'))
            if bot_logic.correct_answers >= 18:
                bot.send_message(call.message.chat.id, "<b>–†–ï–ó–£–õ–¨–¢–ê–¢</b>\n\n"
                                                       "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã —Å–¥–∞–ª–∏ –±–∏–ª–µ—Ç!\n\n"
                                                       f"–†–µ—à–µ–Ω–æ: {bot_logic.correct_answers} –∏–∑ 20",
                                 reply_markup=back_menu.get(),
                                 parse_mode='html')
            else:
                bot.send_message(call.message.chat.id, "<b>–†–ï–ó–£–õ–¨–¢–ê–¢</b>\n\n"
                                                       "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –Ω–µ —Å–¥–∞–ª–∏ –±–∏–ª–µ—Ç. –ù–∞–¥–æ –±–æ–ª—å—à–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è\n\n"
                                                       f"–†–µ—à–µ–Ω–æ: {bot_logic.correct_answers} –∏–∑ 20",
                                 reply_markup=back_menu.get(),
                                 parse_mode='html')


# Infinite polling of TG servers (to make bot work non-stop)
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
        time.sleep(15)
